/* tslint:disable */
/* eslint-disable */
/**
 * RWS Language Cloud API
 * The RWS Language Cloud public API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ListTermbaseTemplatesResponse,
  TermbaseStructure,
  TermbaseTemplate,
  TermbaseTemplateCreateRequest,
  TermbaseTemplateUpdateRequest,
} from '../models/index';

export interface ConvertTermbaseTemplateRequest {
    authorization: string;
    xLCTenant: string;
    file: Blob;
    fields?: string;
}

export interface CreateTermbaseTemplateRequest {
    authorization: string;
    xLCTenant: string;
    fields?: string;
    termbaseTemplateCreateRequest?: TermbaseTemplateCreateRequest;
}

export interface DeleteTermbaseTemplateRequest {
    termbaseTemplateId: string;
    authorization: string;
    xLCTenant: string;
}

export interface GetTermbaseTemplateRequest {
    termbaseTemplateId: string;
    authorization: string;
    xLCTenant: string;
    fields?: string;
}

export interface ListTermbaseTemplatesRequest {
    authorization: string;
    xLCTenant: string;
    location?: Array<string>;
    fields?: string;
    type?: ListTermbaseTemplatesTypeEnum;
    top?: number;
    skip?: number;
}

export interface UpdateTermbaseTemplateRequest {
    termbaseTemplateId: string;
    authorization: string;
    xLCTenant: string;
    termbaseTemplateUpdateRequest?: TermbaseTemplateUpdateRequest;
}

/**
 * 
 */
export class TermbaseTemplateApi extends runtime.BaseAPI {

    /**
     * Converts a termbase definition (XDT file) to a termbase structure that will be returned in the response.<br> The structure will not be stored in Language Cloud.
     * Convert XDT to Termbase Structure
     */
    async convertTermbaseTemplateRaw(requestParameters: ConvertTermbaseTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TermbaseStructure>> {
        if (requestParameters['authorization'] == null) {
            throw new runtime.RequiredError(
                'authorization',
                'Required parameter "authorization" was null or undefined when calling convertTermbaseTemplate().'
            );
        }

        if (requestParameters['xLCTenant'] == null) {
            throw new runtime.RequiredError(
                'xLCTenant',
                'Required parameter "xLCTenant" was null or undefined when calling convertTermbaseTemplate().'
            );
        }

        if (requestParameters['file'] == null) {
            throw new runtime.RequiredError(
                'file',
                'Required parameter "file" was null or undefined when calling convertTermbaseTemplate().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xLCTenant'] != null) {
            headerParameters['X-LC-Tenant'] = String(requestParameters['xLCTenant']);
        }

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['file'] != null) {
            formParams.append('file', requestParameters['file'] as any);
        }

        const response = await this.request({
            path: `/termbase-templates/convert-xdt`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Converts a termbase definition (XDT file) to a termbase structure that will be returned in the response.<br> The structure will not be stored in Language Cloud.
     * Convert XDT to Termbase Structure
     */
    async convertTermbaseTemplate(requestParameters: ConvertTermbaseTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TermbaseStructure> {
        const response = await this.convertTermbaseTemplateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a new termbase template.
     * Create Termbase Template
     */
    async createTermbaseTemplateRaw(requestParameters: CreateTermbaseTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TermbaseTemplate>> {
        if (requestParameters['authorization'] == null) {
            throw new runtime.RequiredError(
                'authorization',
                'Required parameter "authorization" was null or undefined when calling createTermbaseTemplate().'
            );
        }

        if (requestParameters['xLCTenant'] == null) {
            throw new runtime.RequiredError(
                'xLCTenant',
                'Required parameter "xLCTenant" was null or undefined when calling createTermbaseTemplate().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xLCTenant'] != null) {
            headerParameters['X-LC-Tenant'] = String(requestParameters['xLCTenant']);
        }

        const response = await this.request({
            path: `/termbase-templates`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['termbaseTemplateCreateRequest'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Creates a new termbase template.
     * Create Termbase Template
     */
    async createTermbaseTemplate(requestParameters: CreateTermbaseTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TermbaseTemplate> {
        const response = await this.createTermbaseTemplateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a termbase template by identifier.
     * Delete Termbase Template
     */
    async deleteTermbaseTemplateRaw(requestParameters: DeleteTermbaseTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['termbaseTemplateId'] == null) {
            throw new runtime.RequiredError(
                'termbaseTemplateId',
                'Required parameter "termbaseTemplateId" was null or undefined when calling deleteTermbaseTemplate().'
            );
        }

        if (requestParameters['authorization'] == null) {
            throw new runtime.RequiredError(
                'authorization',
                'Required parameter "authorization" was null or undefined when calling deleteTermbaseTemplate().'
            );
        }

        if (requestParameters['xLCTenant'] == null) {
            throw new runtime.RequiredError(
                'xLCTenant',
                'Required parameter "xLCTenant" was null or undefined when calling deleteTermbaseTemplate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xLCTenant'] != null) {
            headerParameters['X-LC-Tenant'] = String(requestParameters['xLCTenant']);
        }

        const response = await this.request({
            path: `/termbase-templates/{termbaseTemplateId}`.replace(`{${"termbaseTemplateId"}}`, encodeURIComponent(String(requestParameters['termbaseTemplateId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a termbase template by identifier.
     * Delete Termbase Template
     */
    async deleteTermbaseTemplate(requestParameters: DeleteTermbaseTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteTermbaseTemplateRaw(requestParameters, initOverrides);
    }

    /**
     * Get a termbase template by identifier.
     * Get Termbase Template
     */
    async getTermbaseTemplateRaw(requestParameters: GetTermbaseTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TermbaseTemplate>> {
        if (requestParameters['termbaseTemplateId'] == null) {
            throw new runtime.RequiredError(
                'termbaseTemplateId',
                'Required parameter "termbaseTemplateId" was null or undefined when calling getTermbaseTemplate().'
            );
        }

        if (requestParameters['authorization'] == null) {
            throw new runtime.RequiredError(
                'authorization',
                'Required parameter "authorization" was null or undefined when calling getTermbaseTemplate().'
            );
        }

        if (requestParameters['xLCTenant'] == null) {
            throw new runtime.RequiredError(
                'xLCTenant',
                'Required parameter "xLCTenant" was null or undefined when calling getTermbaseTemplate().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xLCTenant'] != null) {
            headerParameters['X-LC-Tenant'] = String(requestParameters['xLCTenant']);
        }

        const response = await this.request({
            path: `/termbase-templates/{termbaseTemplateId}`.replace(`{${"termbaseTemplateId"}}`, encodeURIComponent(String(requestParameters['termbaseTemplateId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get a termbase template by identifier.
     * Get Termbase Template
     */
    async getTermbaseTemplate(requestParameters: GetTermbaseTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TermbaseTemplate> {
        const response = await this.getTermbaseTemplateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List termbase templates.
     * List Termbase Templates
     */
    async listTermbaseTemplatesRaw(requestParameters: ListTermbaseTemplatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListTermbaseTemplatesResponse>> {
        if (requestParameters['authorization'] == null) {
            throw new runtime.RequiredError(
                'authorization',
                'Required parameter "authorization" was null or undefined when calling listTermbaseTemplates().'
            );
        }

        if (requestParameters['xLCTenant'] == null) {
            throw new runtime.RequiredError(
                'xLCTenant',
                'Required parameter "xLCTenant" was null or undefined when calling listTermbaseTemplates().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['location'] != null) {
            queryParameters['location'] = requestParameters['location'];
        }

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields'];
        }

        if (requestParameters['type'] != null) {
            queryParameters['type'] = requestParameters['type'];
        }

        if (requestParameters['top'] != null) {
            queryParameters['top'] = requestParameters['top'];
        }

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xLCTenant'] != null) {
            headerParameters['X-LC-Tenant'] = String(requestParameters['xLCTenant']);
        }

        const response = await this.request({
            path: `/termbase-templates`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * List termbase templates.
     * List Termbase Templates
     */
    async listTermbaseTemplates(requestParameters: ListTermbaseTemplatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListTermbaseTemplatesResponse> {
        const response = await this.listTermbaseTemplatesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates the termbase template.
     * Update Termbase Template
     */
    async updateTermbaseTemplateRaw(requestParameters: UpdateTermbaseTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['termbaseTemplateId'] == null) {
            throw new runtime.RequiredError(
                'termbaseTemplateId',
                'Required parameter "termbaseTemplateId" was null or undefined when calling updateTermbaseTemplate().'
            );
        }

        if (requestParameters['authorization'] == null) {
            throw new runtime.RequiredError(
                'authorization',
                'Required parameter "authorization" was null or undefined when calling updateTermbaseTemplate().'
            );
        }

        if (requestParameters['xLCTenant'] == null) {
            throw new runtime.RequiredError(
                'xLCTenant',
                'Required parameter "xLCTenant" was null or undefined when calling updateTermbaseTemplate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xLCTenant'] != null) {
            headerParameters['X-LC-Tenant'] = String(requestParameters['xLCTenant']);
        }

        const response = await this.request({
            path: `/termbase-templates/{termbaseTemplateId}`.replace(`{${"termbaseTemplateId"}}`, encodeURIComponent(String(requestParameters['termbaseTemplateId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['termbaseTemplateUpdateRequest'],
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates the termbase template.
     * Update Termbase Template
     */
    async updateTermbaseTemplate(requestParameters: UpdateTermbaseTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateTermbaseTemplateRaw(requestParameters, initOverrides);
    }

}

/**
 * @export
 */
export const ListTermbaseTemplatesTypeEnum = {
    System: 'system',
    UserDefined: 'userDefined'
} as const;
export type ListTermbaseTemplatesTypeEnum = typeof ListTermbaseTemplatesTypeEnum[keyof typeof ListTermbaseTemplatesTypeEnum];
