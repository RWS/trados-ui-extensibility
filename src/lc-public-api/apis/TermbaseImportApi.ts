/* tslint:disable */
/* eslint-disable */
/**
 * RWS Language Cloud API
 * The RWS Language Cloud public API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ListTermbaseImportHistory,
  TermbaseImportResponse,
  TermbasePollImportResponse,
} from '../models/index';

export interface DownloadTermbaseImportLogRequest {
    termbaseId: string;
    importId: string;
    authorization: string;
    xLCTenant: string;
}

export interface GetImportHistoryRequest {
    termbaseId: string;
    authorization: string;
    xLCTenant: string;
    fields?: string;
    top?: number;
    skip?: number;
}

export interface ImportTermbaseRequest {
    termbaseId: string;
    authorization: string;
    xLCTenant: string;
    file: Blob;
    strictImport?: boolean;
    duplicateEntriesStrategy?: ImportTermbaseDuplicateEntriesStrategyEnum;
}

export interface PollTermbaseImportRequest {
    termbaseId: string;
    importId: string;
    authorization: string;
    xLCTenant: string;
}

/**
 * 
 */
export class TermbaseImportApi extends runtime.BaseAPI {

    /**
     * Downloads the termbase import logs.
     * Download Termbase Import Logs
     */
    async downloadTermbaseImportLogRaw(requestParameters: DownloadTermbaseImportLogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters['termbaseId'] == null) {
            throw new runtime.RequiredError(
                'termbaseId',
                'Required parameter "termbaseId" was null or undefined when calling downloadTermbaseImportLog().'
            );
        }

        if (requestParameters['importId'] == null) {
            throw new runtime.RequiredError(
                'importId',
                'Required parameter "importId" was null or undefined when calling downloadTermbaseImportLog().'
            );
        }

        if (requestParameters['authorization'] == null) {
            throw new runtime.RequiredError(
                'authorization',
                'Required parameter "authorization" was null or undefined when calling downloadTermbaseImportLog().'
            );
        }

        if (requestParameters['xLCTenant'] == null) {
            throw new runtime.RequiredError(
                'xLCTenant',
                'Required parameter "xLCTenant" was null or undefined when calling downloadTermbaseImportLog().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xLCTenant'] != null) {
            headerParameters['X-LC-Tenant'] = String(requestParameters['xLCTenant']);
        }

        const response = await this.request({
            path: `/termbases/{termbaseId}/imports/{importId}/logs`.replace(`{${"termbaseId"}}`, encodeURIComponent(String(requestParameters['termbaseId']))).replace(`{${"importId"}}`, encodeURIComponent(String(requestParameters['importId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     * Downloads the termbase import logs.
     * Download Termbase Import Logs
     */
    async downloadTermbaseImportLog(requestParameters: DownloadTermbaseImportLogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.downloadTermbaseImportLogRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets the import history for a termbase.
     * Get Termbase Import History
     */
    async getImportHistoryRaw(requestParameters: GetImportHistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListTermbaseImportHistory>> {
        if (requestParameters['termbaseId'] == null) {
            throw new runtime.RequiredError(
                'termbaseId',
                'Required parameter "termbaseId" was null or undefined when calling getImportHistory().'
            );
        }

        if (requestParameters['authorization'] == null) {
            throw new runtime.RequiredError(
                'authorization',
                'Required parameter "authorization" was null or undefined when calling getImportHistory().'
            );
        }

        if (requestParameters['xLCTenant'] == null) {
            throw new runtime.RequiredError(
                'xLCTenant',
                'Required parameter "xLCTenant" was null or undefined when calling getImportHistory().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields'];
        }

        if (requestParameters['top'] != null) {
            queryParameters['top'] = requestParameters['top'];
        }

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xLCTenant'] != null) {
            headerParameters['X-LC-Tenant'] = String(requestParameters['xLCTenant']);
        }

        const response = await this.request({
            path: `/termbases/{termbaseId}/imports`.replace(`{${"termbaseId"}}`, encodeURIComponent(String(requestParameters['termbaseId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Gets the import history for a termbase.
     * Get Termbase Import History
     */
    async getImportHistory(requestParameters: GetImportHistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListTermbaseImportHistory> {
        const response = await this.getImportHistoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Generates an asynchronous import operation.<br> Use the Poll Import Termbase endpoint to poll until the import status is `done`.<br>
     * Import Termbase
     */
    async importTermbaseRaw(requestParameters: ImportTermbaseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TermbaseImportResponse>> {
        if (requestParameters['termbaseId'] == null) {
            throw new runtime.RequiredError(
                'termbaseId',
                'Required parameter "termbaseId" was null or undefined when calling importTermbase().'
            );
        }

        if (requestParameters['authorization'] == null) {
            throw new runtime.RequiredError(
                'authorization',
                'Required parameter "authorization" was null or undefined when calling importTermbase().'
            );
        }

        if (requestParameters['xLCTenant'] == null) {
            throw new runtime.RequiredError(
                'xLCTenant',
                'Required parameter "xLCTenant" was null or undefined when calling importTermbase().'
            );
        }

        if (requestParameters['file'] == null) {
            throw new runtime.RequiredError(
                'file',
                'Required parameter "file" was null or undefined when calling importTermbase().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['strictImport'] != null) {
            queryParameters['strictImport'] = requestParameters['strictImport'];
        }

        if (requestParameters['duplicateEntriesStrategy'] != null) {
            queryParameters['duplicateEntriesStrategy'] = requestParameters['duplicateEntriesStrategy'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xLCTenant'] != null) {
            headerParameters['X-LC-Tenant'] = String(requestParameters['xLCTenant']);
        }

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['file'] != null) {
            formParams.append('file', requestParameters['file'] as any);
        }

        const response = await this.request({
            path: `/termbases/{termbaseId}/imports`.replace(`{${"termbaseId"}}`, encodeURIComponent(String(requestParameters['termbaseId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Generates an asynchronous import operation.<br> Use the Poll Import Termbase endpoint to poll until the import status is `done`.<br>
     * Import Termbase
     */
    async importTermbase(requestParameters: ImportTermbaseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TermbaseImportResponse> {
        const response = await this.importTermbaseRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Polls a termbase import operation.
     * Poll Termbase Import
     */
    async pollTermbaseImportRaw(requestParameters: PollTermbaseImportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TermbasePollImportResponse>> {
        if (requestParameters['termbaseId'] == null) {
            throw new runtime.RequiredError(
                'termbaseId',
                'Required parameter "termbaseId" was null or undefined when calling pollTermbaseImport().'
            );
        }

        if (requestParameters['importId'] == null) {
            throw new runtime.RequiredError(
                'importId',
                'Required parameter "importId" was null or undefined when calling pollTermbaseImport().'
            );
        }

        if (requestParameters['authorization'] == null) {
            throw new runtime.RequiredError(
                'authorization',
                'Required parameter "authorization" was null or undefined when calling pollTermbaseImport().'
            );
        }

        if (requestParameters['xLCTenant'] == null) {
            throw new runtime.RequiredError(
                'xLCTenant',
                'Required parameter "xLCTenant" was null or undefined when calling pollTermbaseImport().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xLCTenant'] != null) {
            headerParameters['X-LC-Tenant'] = String(requestParameters['xLCTenant']);
        }

        const response = await this.request({
            path: `/termbases/{termbaseId}/imports/{importId}`.replace(`{${"termbaseId"}}`, encodeURIComponent(String(requestParameters['termbaseId']))).replace(`{${"importId"}}`, encodeURIComponent(String(requestParameters['importId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Polls a termbase import operation.
     * Poll Termbase Import
     */
    async pollTermbaseImport(requestParameters: PollTermbaseImportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TermbasePollImportResponse> {
        const response = await this.pollTermbaseImportRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ImportTermbaseDuplicateEntriesStrategyEnum = {
    Ignore: 'ignore',
    Merge: 'merge',
    Overwrite: 'overwrite'
} as const;
export type ImportTermbaseDuplicateEntriesStrategyEnum = typeof ImportTermbaseDuplicateEntriesStrategyEnum[keyof typeof ImportTermbaseDuplicateEntriesStrategyEnum];
