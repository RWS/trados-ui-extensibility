/* tslint:disable */
/* eslint-disable */
/**
 * RWS Language Cloud API
 * The RWS Language Cloud public API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ListTranslationMemoriesReposne,
  ListTranslationMemoryFieldTemplates,
  TranslationMemory,
  TranslationMemoryBase,
  TranslationMemoryCreateRequest,
  TranslationMemoryFieldTemplate,
  TranslationMemoryUpdateRequest,
} from '../models/index';

export interface CopyTranslationMemoryRequest {
    translationMemoryId: string;
    xLCTenant: string;
    authorization: string;
    fields?: string;
}

export interface CreateTranslationMemoryRequest {
    xLCTenant: string;
    authorization: string;
    fields?: string;
    translationMemoryCreateRequest?: TranslationMemoryCreateRequest;
}

export interface DeleteTranslationMemoryRequest {
    translationMemoryId: string;
    xLCTenant: string;
    authorization: string;
}

export interface GetFieldTemplateRequest {
    fieldTemplateId: string;
    authorization: string;
    xLCTenant: string;
    fields?: string;
}

export interface GetTranslationMemoryRequest {
    translationMemoryId: string;
    xLCTenant: string;
    authorization: string;
    fields?: string;
}

export interface ListFieldTemplatesRequest {
    authorization: string;
    xLCTenant: string;
    top?: number;
    skip?: number;
    sort?: string;
    location?: Array<string>;
    locationStrategy?: ListFieldTemplatesLocationStrategyEnum;
    fields?: string;
}

export interface ListTranslationMemoriesRequest {
    xLCTenant: string;
    authorization: string;
    top?: number;
    skip?: number;
    location?: Array<string>;
    locationStrategy?: ListTranslationMemoriesLocationStrategyEnum;
    sort?: string;
    fields?: string;
}

export interface UpdateTranslationMemoryRequest {
    translationMemoryId: string;
    xLCTenant: string;
    authorization: string;
    translationMemoryUpdateRequest?: TranslationMemoryUpdateRequest;
}

/**
 * 
 */
export class TranslationMemoryApi extends runtime.BaseAPI {

    /**
     * Creates a copy of a Translation Memory. The name will be suffixed with \' (Copy) \'
     * Copy Translation Memory
     */
    async copyTranslationMemoryRaw(requestParameters: CopyTranslationMemoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TranslationMemory>> {
        if (requestParameters['translationMemoryId'] == null) {
            throw new runtime.RequiredError(
                'translationMemoryId',
                'Required parameter "translationMemoryId" was null or undefined when calling copyTranslationMemory().'
            );
        }

        if (requestParameters['xLCTenant'] == null) {
            throw new runtime.RequiredError(
                'xLCTenant',
                'Required parameter "xLCTenant" was null or undefined when calling copyTranslationMemory().'
            );
        }

        if (requestParameters['authorization'] == null) {
            throw new runtime.RequiredError(
                'authorization',
                'Required parameter "authorization" was null or undefined when calling copyTranslationMemory().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xLCTenant'] != null) {
            headerParameters['X-LC-Tenant'] = String(requestParameters['xLCTenant']);
        }

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/translation-memory/{translationMemoryId}/copy`.replace(`{${"translationMemoryId"}}`, encodeURIComponent(String(requestParameters['translationMemoryId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Creates a copy of a Translation Memory. The name will be suffixed with \' (Copy) \'
     * Copy Translation Memory
     */
    async copyTranslationMemory(requestParameters: CopyTranslationMemoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TranslationMemory> {
        const response = await this.copyTranslationMemoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new Translation Memory.
     * Create Translation Memory
     */
    async createTranslationMemoryRaw(requestParameters: CreateTranslationMemoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TranslationMemoryBase>> {
        if (requestParameters['xLCTenant'] == null) {
            throw new runtime.RequiredError(
                'xLCTenant',
                'Required parameter "xLCTenant" was null or undefined when calling createTranslationMemory().'
            );
        }

        if (requestParameters['authorization'] == null) {
            throw new runtime.RequiredError(
                'authorization',
                'Required parameter "authorization" was null or undefined when calling createTranslationMemory().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['xLCTenant'] != null) {
            headerParameters['X-LC-Tenant'] = String(requestParameters['xLCTenant']);
        }

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/translation-memory`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['translationMemoryCreateRequest'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Create a new Translation Memory.
     * Create Translation Memory
     */
    async createTranslationMemory(requestParameters: CreateTranslationMemoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TranslationMemoryBase> {
        const response = await this.createTranslationMemoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a Translation Memory.
     * Delete Translation Memory
     */
    async deleteTranslationMemoryRaw(requestParameters: DeleteTranslationMemoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['translationMemoryId'] == null) {
            throw new runtime.RequiredError(
                'translationMemoryId',
                'Required parameter "translationMemoryId" was null or undefined when calling deleteTranslationMemory().'
            );
        }

        if (requestParameters['xLCTenant'] == null) {
            throw new runtime.RequiredError(
                'xLCTenant',
                'Required parameter "xLCTenant" was null or undefined when calling deleteTranslationMemory().'
            );
        }

        if (requestParameters['authorization'] == null) {
            throw new runtime.RequiredError(
                'authorization',
                'Required parameter "authorization" was null or undefined when calling deleteTranslationMemory().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xLCTenant'] != null) {
            headerParameters['X-LC-Tenant'] = String(requestParameters['xLCTenant']);
        }

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/translation-memory/{translationMemoryId}`.replace(`{${"translationMemoryId"}}`, encodeURIComponent(String(requestParameters['translationMemoryId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a Translation Memory.
     * Delete Translation Memory
     */
    async deleteTranslationMemory(requestParameters: DeleteTranslationMemoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteTranslationMemoryRaw(requestParameters, initOverrides);
    }

    /**
     * Get a single Field Template by identifier.
     * Get Field Template
     */
    async getFieldTemplateRaw(requestParameters: GetFieldTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TranslationMemoryFieldTemplate>> {
        if (requestParameters['fieldTemplateId'] == null) {
            throw new runtime.RequiredError(
                'fieldTemplateId',
                'Required parameter "fieldTemplateId" was null or undefined when calling getFieldTemplate().'
            );
        }

        if (requestParameters['authorization'] == null) {
            throw new runtime.RequiredError(
                'authorization',
                'Required parameter "authorization" was null or undefined when calling getFieldTemplate().'
            );
        }

        if (requestParameters['xLCTenant'] == null) {
            throw new runtime.RequiredError(
                'xLCTenant',
                'Required parameter "xLCTenant" was null or undefined when calling getFieldTemplate().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xLCTenant'] != null) {
            headerParameters['X-LC-Tenant'] = String(requestParameters['xLCTenant']);
        }

        const response = await this.request({
            path: `/translation-memory/field-templates/{fieldTemplateId}`.replace(`{${"fieldTemplateId"}}`, encodeURIComponent(String(requestParameters['fieldTemplateId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get a single Field Template by identifier.
     * Get Field Template
     */
    async getFieldTemplate(requestParameters: GetFieldTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TranslationMemoryFieldTemplate> {
        const response = await this.getFieldTemplateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a single Translation Memory by identifier.
     * Get Translation Memory
     */
    async getTranslationMemoryRaw(requestParameters: GetTranslationMemoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TranslationMemory>> {
        if (requestParameters['translationMemoryId'] == null) {
            throw new runtime.RequiredError(
                'translationMemoryId',
                'Required parameter "translationMemoryId" was null or undefined when calling getTranslationMemory().'
            );
        }

        if (requestParameters['xLCTenant'] == null) {
            throw new runtime.RequiredError(
                'xLCTenant',
                'Required parameter "xLCTenant" was null or undefined when calling getTranslationMemory().'
            );
        }

        if (requestParameters['authorization'] == null) {
            throw new runtime.RequiredError(
                'authorization',
                'Required parameter "authorization" was null or undefined when calling getTranslationMemory().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xLCTenant'] != null) {
            headerParameters['X-LC-Tenant'] = String(requestParameters['xLCTenant']);
        }

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/translation-memory/{translationMemoryId}`.replace(`{${"translationMemoryId"}}`, encodeURIComponent(String(requestParameters['translationMemoryId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get a single Translation Memory by identifier.
     * Get Translation Memory
     */
    async getTranslationMemory(requestParameters: GetTranslationMemoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TranslationMemory> {
        const response = await this.getTranslationMemoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves all the Field Templates.
     * List Field Templates
     */
    async listFieldTemplatesRaw(requestParameters: ListFieldTemplatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListTranslationMemoryFieldTemplates>> {
        if (requestParameters['authorization'] == null) {
            throw new runtime.RequiredError(
                'authorization',
                'Required parameter "authorization" was null or undefined when calling listFieldTemplates().'
            );
        }

        if (requestParameters['xLCTenant'] == null) {
            throw new runtime.RequiredError(
                'xLCTenant',
                'Required parameter "xLCTenant" was null or undefined when calling listFieldTemplates().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['top'] != null) {
            queryParameters['top'] = requestParameters['top'];
        }

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['location'] != null) {
            queryParameters['location'] = requestParameters['location']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['locationStrategy'] != null) {
            queryParameters['locationStrategy'] = requestParameters['locationStrategy'];
        }

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xLCTenant'] != null) {
            headerParameters['X-LC-Tenant'] = String(requestParameters['xLCTenant']);
        }

        const response = await this.request({
            path: `/translation-memory/field-templates`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves all the Field Templates.
     * List Field Templates
     */
    async listFieldTemplates(requestParameters: ListFieldTemplatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListTranslationMemoryFieldTemplates> {
        const response = await this.listFieldTemplatesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves all the Translation Memories.
     * List Translation Memories
     */
    async listTranslationMemoriesRaw(requestParameters: ListTranslationMemoriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListTranslationMemoriesReposne>> {
        if (requestParameters['xLCTenant'] == null) {
            throw new runtime.RequiredError(
                'xLCTenant',
                'Required parameter "xLCTenant" was null or undefined when calling listTranslationMemories().'
            );
        }

        if (requestParameters['authorization'] == null) {
            throw new runtime.RequiredError(
                'authorization',
                'Required parameter "authorization" was null or undefined when calling listTranslationMemories().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['top'] != null) {
            queryParameters['top'] = requestParameters['top'];
        }

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['location'] != null) {
            queryParameters['location'] = requestParameters['location']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['locationStrategy'] != null) {
            queryParameters['locationStrategy'] = requestParameters['locationStrategy'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xLCTenant'] != null) {
            headerParameters['X-LC-Tenant'] = String(requestParameters['xLCTenant']);
        }

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/translation-memory`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves all the Translation Memories.
     * List Translation Memories
     */
    async listTranslationMemories(requestParameters: ListTranslationMemoriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListTranslationMemoriesReposne> {
        const response = await this.listTranslationMemoriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a Translation Memory. We recommend reading this page too [Updating data with PUT](../docs/Updating-data-with-PUT.md).
     * Update Translation Memory
     */
    async updateTranslationMemoryRaw(requestParameters: UpdateTranslationMemoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['translationMemoryId'] == null) {
            throw new runtime.RequiredError(
                'translationMemoryId',
                'Required parameter "translationMemoryId" was null or undefined when calling updateTranslationMemory().'
            );
        }

        if (requestParameters['xLCTenant'] == null) {
            throw new runtime.RequiredError(
                'xLCTenant',
                'Required parameter "xLCTenant" was null or undefined when calling updateTranslationMemory().'
            );
        }

        if (requestParameters['authorization'] == null) {
            throw new runtime.RequiredError(
                'authorization',
                'Required parameter "authorization" was null or undefined when calling updateTranslationMemory().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['xLCTenant'] != null) {
            headerParameters['X-LC-Tenant'] = String(requestParameters['xLCTenant']);
        }

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/translation-memory/{translationMemoryId}`.replace(`{${"translationMemoryId"}}`, encodeURIComponent(String(requestParameters['translationMemoryId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['translationMemoryUpdateRequest'],
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates a Translation Memory. We recommend reading this page too [Updating data with PUT](../docs/Updating-data-with-PUT.md).
     * Update Translation Memory
     */
    async updateTranslationMemory(requestParameters: UpdateTranslationMemoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateTranslationMemoryRaw(requestParameters, initOverrides);
    }

}

/**
 * @export
 */
export const ListFieldTemplatesLocationStrategyEnum = {
    Location: 'location',
    Lineage: 'lineage',
    Bloodline: 'bloodline',
    Genealogy: 'genealogy'
} as const;
export type ListFieldTemplatesLocationStrategyEnum = typeof ListFieldTemplatesLocationStrategyEnum[keyof typeof ListFieldTemplatesLocationStrategyEnum];
/**
 * @export
 */
export const ListTranslationMemoriesLocationStrategyEnum = {
    Location: 'location',
    Lineage: 'lineage',
    Bloodline: 'bloodline',
    Genealogy: 'genealogy'
} as const;
export type ListTranslationMemoriesLocationStrategyEnum = typeof ListTranslationMemoriesLocationStrategyEnum[keyof typeof ListTranslationMemoriesLocationStrategyEnum];
