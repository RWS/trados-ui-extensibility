/* tslint:disable */
/* eslint-disable */
/**
 * RWS Language Cloud API
 * The RWS Language Cloud public API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ListTranslationMemoryImportHistory,
  TranslationMemoryImportRequest,
  TranslationMemoryImportResponse,
} from '../models/index';

export interface GetTMImportHistoryRequest {
    translationMemoryId: string;
    authorization: string;
    xLCTenant: string;
    fields?: string;
    top?: number;
    skip?: number;
}

export interface ImportTranslationMemoryRequest {
    translationMemoryId: string;
    authorization: string;
    xLCTenant: string;
    properties: TranslationMemoryImportRequest;
    file: Blob;
}

export interface PollTMImportRequest {
    importId: string;
    authorization: string;
    xLCTenant: string;
}

/**
 * 
 */
export class TranslationMemoryImportApi extends runtime.BaseAPI {

    /**
     * Gets the import history for a translation memory.
     * Get Translation Memory Import History
     */
    async getTMImportHistoryRaw(requestParameters: GetTMImportHistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListTranslationMemoryImportHistory>> {
        if (requestParameters['translationMemoryId'] == null) {
            throw new runtime.RequiredError(
                'translationMemoryId',
                'Required parameter "translationMemoryId" was null or undefined when calling getTMImportHistory().'
            );
        }

        if (requestParameters['authorization'] == null) {
            throw new runtime.RequiredError(
                'authorization',
                'Required parameter "authorization" was null or undefined when calling getTMImportHistory().'
            );
        }

        if (requestParameters['xLCTenant'] == null) {
            throw new runtime.RequiredError(
                'xLCTenant',
                'Required parameter "xLCTenant" was null or undefined when calling getTMImportHistory().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields'];
        }

        if (requestParameters['top'] != null) {
            queryParameters['top'] = requestParameters['top'];
        }

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xLCTenant'] != null) {
            headerParameters['X-LC-Tenant'] = String(requestParameters['xLCTenant']);
        }

        const response = await this.request({
            path: `/translation-memory/{translationMemoryId}/imports`.replace(`{${"translationMemoryId"}}`, encodeURIComponent(String(requestParameters['translationMemoryId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Gets the import history for a translation memory.
     * Get Translation Memory Import History
     */
    async getTMImportHistory(requestParameters: GetTMImportHistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListTranslationMemoryImportHistory> {
        const response = await this.getTMImportHistoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Generates an asynchronous import operation.  <br> <br> Read more about prerequisites and limitations on the [official documentation center](https://docs.rws.com/791595/741139/trados-enterprise/importing-tm-content). <br> Note: The order of the multipart form parameter must be implemented as such: properties first, file second. <br> Use the Poll Translation Memory Import endpoint to poll until the import status is `done`.<br> To track the progress of the import please refer to [Poll Translation Memory Import](../reference/Public-API.v1.json/paths/~1translation-memory~1imports~1{importId}/get). 
     * Import Translation Memory
     */
    async importTranslationMemoryRaw(requestParameters: ImportTranslationMemoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TranslationMemoryImportResponse>> {
        if (requestParameters['translationMemoryId'] == null) {
            throw new runtime.RequiredError(
                'translationMemoryId',
                'Required parameter "translationMemoryId" was null or undefined when calling importTranslationMemory().'
            );
        }

        if (requestParameters['authorization'] == null) {
            throw new runtime.RequiredError(
                'authorization',
                'Required parameter "authorization" was null or undefined when calling importTranslationMemory().'
            );
        }

        if (requestParameters['xLCTenant'] == null) {
            throw new runtime.RequiredError(
                'xLCTenant',
                'Required parameter "xLCTenant" was null or undefined when calling importTranslationMemory().'
            );
        }

        if (requestParameters['properties'] == null) {
            throw new runtime.RequiredError(
                'properties',
                'Required parameter "properties" was null or undefined when calling importTranslationMemory().'
            );
        }

        if (requestParameters['file'] == null) {
            throw new runtime.RequiredError(
                'file',
                'Required parameter "file" was null or undefined when calling importTranslationMemory().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xLCTenant'] != null) {
            headerParameters['X-LC-Tenant'] = String(requestParameters['xLCTenant']);
        }

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['properties'] != null) {

            formParams.append('properties', new Blob([JSON.stringify(requestParameters['properties'])], { type: "application/json", }));
        }

        if (requestParameters['file'] != null) {
            formParams.append('file', requestParameters['file'] as any);
        }

        const response = await this.request({
            path: `/translation-memory/{translationMemoryId}/imports`.replace(`{${"translationMemoryId"}}`, encodeURIComponent(String(requestParameters['translationMemoryId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Generates an asynchronous import operation.  <br> <br> Read more about prerequisites and limitations on the [official documentation center](https://docs.rws.com/791595/741139/trados-enterprise/importing-tm-content). <br> Note: The order of the multipart form parameter must be implemented as such: properties first, file second. <br> Use the Poll Translation Memory Import endpoint to poll until the import status is `done`.<br> To track the progress of the import please refer to [Poll Translation Memory Import](../reference/Public-API.v1.json/paths/~1translation-memory~1imports~1{importId}/get). 
     * Import Translation Memory
     */
    async importTranslationMemory(requestParameters: ImportTranslationMemoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TranslationMemoryImportResponse> {
        const response = await this.importTranslationMemoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Polls a Translation Memory import operation. The import is finished when the status is `done`.
     * Poll Translation Memory Import
     */
    async pollTMImportRaw(requestParameters: PollTMImportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TranslationMemoryImportResponse>> {
        if (requestParameters['importId'] == null) {
            throw new runtime.RequiredError(
                'importId',
                'Required parameter "importId" was null or undefined when calling pollTMImport().'
            );
        }

        if (requestParameters['authorization'] == null) {
            throw new runtime.RequiredError(
                'authorization',
                'Required parameter "authorization" was null or undefined when calling pollTMImport().'
            );
        }

        if (requestParameters['xLCTenant'] == null) {
            throw new runtime.RequiredError(
                'xLCTenant',
                'Required parameter "xLCTenant" was null or undefined when calling pollTMImport().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xLCTenant'] != null) {
            headerParameters['X-LC-Tenant'] = String(requestParameters['xLCTenant']);
        }

        const response = await this.request({
            path: `/translation-memory/imports/{importId}`.replace(`{${"importId"}}`, encodeURIComponent(String(requestParameters['importId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Polls a Translation Memory import operation. The import is finished when the status is `done`.
     * Poll Translation Memory Import
     */
    async pollTMImport(requestParameters: PollTMImportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TranslationMemoryImportResponse> {
        const response = await this.pollTMImportRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
