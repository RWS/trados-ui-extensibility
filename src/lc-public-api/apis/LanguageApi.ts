/* tslint:disable */
/* eslint-disable */
/**
 * RWS Language Cloud API
 * The RWS Language Cloud public API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ListLanguagesResponse,
} from '../models/index';

export interface ListLanguagesRequest {
    authorization: string;
    xLCTenant: string;
    languageCodes?: Array<string>;
    type?: ListLanguagesTypeEnum;
    fields?: string;
}

/**
 * 
 */
export class LanguageApi extends runtime.BaseAPI {

    /**
     * Retrieves a list of all the languages.  The supported values for language `type` filter are: \"all\", \"specific\" or \"neutral\".\\ The \"neutral\" languages are the generic languages, e.g.: en -> English.\\ The \"specific\" languages are the sub-languages, e.g.: en-150 -> English (Europe), en-us -> English (United States).
     * List Languages
     */
    async listLanguagesRaw(requestParameters: ListLanguagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListLanguagesResponse>> {
        if (requestParameters['authorization'] == null) {
            throw new runtime.RequiredError(
                'authorization',
                'Required parameter "authorization" was null or undefined when calling listLanguages().'
            );
        }

        if (requestParameters['xLCTenant'] == null) {
            throw new runtime.RequiredError(
                'xLCTenant',
                'Required parameter "xLCTenant" was null or undefined when calling listLanguages().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['languageCodes'] != null) {
            queryParameters['languageCodes'] = requestParameters['languageCodes']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['type'] != null) {
            queryParameters['type'] = requestParameters['type'];
        }

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xLCTenant'] != null) {
            headerParameters['X-LC-Tenant'] = String(requestParameters['xLCTenant']);
        }

        const response = await this.request({
            path: `/languages`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves a list of all the languages.  The supported values for language `type` filter are: \"all\", \"specific\" or \"neutral\".\\ The \"neutral\" languages are the generic languages, e.g.: en -> English.\\ The \"specific\" languages are the sub-languages, e.g.: en-150 -> English (Europe), en-us -> English (United States).
     * List Languages
     */
    async listLanguages(requestParameters: ListLanguagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListLanguagesResponse> {
        const response = await this.listLanguagesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ListLanguagesTypeEnum = {
    All: 'all',
    Specific: 'specific',
    Neutral: 'neutral'
} as const;
export type ListLanguagesTypeEnum = typeof ListLanguagesTypeEnum[keyof typeof ListLanguagesTypeEnum];
