/* tslint:disable */
/* eslint-disable */
/**
 * RWS Language Cloud API
 * The RWS Language Cloud public API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  FileProcessingConfiguration,
  FileTypeSetting,
  ListFileProcessingConfigurationsResponse,
  ListFileTypeSettingsResponse,
} from '../models/index';

export interface GetFileProcessingConfigurationRequest {
    fileProcessingConfigurationId: string;
    authorization: string;
    xLCTenant: string;
    fields?: string;
}

export interface GetFileTypeSettingRequest {
    fileProcessingConfigurationId: string;
    fileTypeSettingId: string;
    authorization: string;
    xLCTenant: string;
    fields?: string;
}

export interface ListFileProcessingConfigurationsRequest {
    authorization: string;
    xLCTenant: string;
    top?: number;
    skip?: number;
    location?: Array<string>;
    locationStrategy?: ListFileProcessingConfigurationsLocationStrategyEnum;
    sort?: string;
    fields?: string;
}

export interface ListFileTypeSettingsRequest {
    fileProcessingConfigurationId: string;
    authorization: string;
    xLCTenant: string;
    fields?: string;
}

/**
 * 
 */
export class FileProcessingConfigurationApi extends runtime.BaseAPI {

    /**
     * Retrieves a file processing configuration by identifier.
     * Get File Processing Configuration
     */
    async getFileProcessingConfigurationRaw(requestParameters: GetFileProcessingConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FileProcessingConfiguration>> {
        if (requestParameters['fileProcessingConfigurationId'] == null) {
            throw new runtime.RequiredError(
                'fileProcessingConfigurationId',
                'Required parameter "fileProcessingConfigurationId" was null or undefined when calling getFileProcessingConfiguration().'
            );
        }

        if (requestParameters['authorization'] == null) {
            throw new runtime.RequiredError(
                'authorization',
                'Required parameter "authorization" was null or undefined when calling getFileProcessingConfiguration().'
            );
        }

        if (requestParameters['xLCTenant'] == null) {
            throw new runtime.RequiredError(
                'xLCTenant',
                'Required parameter "xLCTenant" was null or undefined when calling getFileProcessingConfiguration().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xLCTenant'] != null) {
            headerParameters['X-LC-Tenant'] = String(requestParameters['xLCTenant']);
        }

        const response = await this.request({
            path: `/file-processing-configurations/{fileProcessingConfigurationId}`.replace(`{${"fileProcessingConfigurationId"}}`, encodeURIComponent(String(requestParameters['fileProcessingConfigurationId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves a file processing configuration by identifier.
     * Get File Processing Configuration
     */
    async getFileProcessingConfiguration(requestParameters: GetFileProcessingConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FileProcessingConfiguration> {
        const response = await this.getFileProcessingConfigurationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a file type setting by identifier.
     * Get File Type Setting
     */
    async getFileTypeSettingRaw(requestParameters: GetFileTypeSettingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FileTypeSetting>> {
        if (requestParameters['fileProcessingConfigurationId'] == null) {
            throw new runtime.RequiredError(
                'fileProcessingConfigurationId',
                'Required parameter "fileProcessingConfigurationId" was null or undefined when calling getFileTypeSetting().'
            );
        }

        if (requestParameters['fileTypeSettingId'] == null) {
            throw new runtime.RequiredError(
                'fileTypeSettingId',
                'Required parameter "fileTypeSettingId" was null or undefined when calling getFileTypeSetting().'
            );
        }

        if (requestParameters['authorization'] == null) {
            throw new runtime.RequiredError(
                'authorization',
                'Required parameter "authorization" was null or undefined when calling getFileTypeSetting().'
            );
        }

        if (requestParameters['xLCTenant'] == null) {
            throw new runtime.RequiredError(
                'xLCTenant',
                'Required parameter "xLCTenant" was null or undefined when calling getFileTypeSetting().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xLCTenant'] != null) {
            headerParameters['X-LC-Tenant'] = String(requestParameters['xLCTenant']);
        }

        const response = await this.request({
            path: `/file-processing-configurations/{fileProcessingConfigurationId}/file-type-settings/{fileTypeSettingId}`.replace(`{${"fileProcessingConfigurationId"}}`, encodeURIComponent(String(requestParameters['fileProcessingConfigurationId']))).replace(`{${"fileTypeSettingId"}}`, encodeURIComponent(String(requestParameters['fileTypeSettingId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves a file type setting by identifier.
     * Get File Type Setting
     */
    async getFileTypeSetting(requestParameters: GetFileTypeSettingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FileTypeSetting> {
        const response = await this.getFileTypeSettingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a list of all the file processing configurations in an account.
     * List File Processing Configurations
     */
    async listFileProcessingConfigurationsRaw(requestParameters: ListFileProcessingConfigurationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListFileProcessingConfigurationsResponse>> {
        if (requestParameters['authorization'] == null) {
            throw new runtime.RequiredError(
                'authorization',
                'Required parameter "authorization" was null or undefined when calling listFileProcessingConfigurations().'
            );
        }

        if (requestParameters['xLCTenant'] == null) {
            throw new runtime.RequiredError(
                'xLCTenant',
                'Required parameter "xLCTenant" was null or undefined when calling listFileProcessingConfigurations().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['top'] != null) {
            queryParameters['top'] = requestParameters['top'];
        }

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['location'] != null) {
            queryParameters['location'] = requestParameters['location']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['locationStrategy'] != null) {
            queryParameters['locationStrategy'] = requestParameters['locationStrategy'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xLCTenant'] != null) {
            headerParameters['X-LC-Tenant'] = String(requestParameters['xLCTenant']);
        }

        const response = await this.request({
            path: `/file-processing-configurations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves a list of all the file processing configurations in an account.
     * List File Processing Configurations
     */
    async listFileProcessingConfigurations(requestParameters: ListFileProcessingConfigurationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListFileProcessingConfigurationsResponse> {
        const response = await this.listFileProcessingConfigurationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a list of all the file type settings in a file processing configuration.
     * List File Type Settings
     */
    async listFileTypeSettingsRaw(requestParameters: ListFileTypeSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListFileTypeSettingsResponse>> {
        if (requestParameters['fileProcessingConfigurationId'] == null) {
            throw new runtime.RequiredError(
                'fileProcessingConfigurationId',
                'Required parameter "fileProcessingConfigurationId" was null or undefined when calling listFileTypeSettings().'
            );
        }

        if (requestParameters['authorization'] == null) {
            throw new runtime.RequiredError(
                'authorization',
                'Required parameter "authorization" was null or undefined when calling listFileTypeSettings().'
            );
        }

        if (requestParameters['xLCTenant'] == null) {
            throw new runtime.RequiredError(
                'xLCTenant',
                'Required parameter "xLCTenant" was null or undefined when calling listFileTypeSettings().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xLCTenant'] != null) {
            headerParameters['X-LC-Tenant'] = String(requestParameters['xLCTenant']);
        }

        const response = await this.request({
            path: `/file-processing-configurations/{fileProcessingConfigurationId}/file-type-settings`.replace(`{${"fileProcessingConfigurationId"}}`, encodeURIComponent(String(requestParameters['fileProcessingConfigurationId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves a list of all the file type settings in a file processing configuration.
     * List File Type Settings
     */
    async listFileTypeSettings(requestParameters: ListFileTypeSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListFileTypeSettingsResponse> {
        const response = await this.listFileTypeSettingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ListFileProcessingConfigurationsLocationStrategyEnum = {
    Location: 'location',
    Lineage: 'lineage',
    Bloodline: 'bloodline',
    Genealogy: 'genealogy'
} as const;
export type ListFileProcessingConfigurationsLocationStrategyEnum = typeof ListFileProcessingConfigurationsLocationStrategyEnum[keyof typeof ListFileProcessingConfigurationsLocationStrategyEnum];
