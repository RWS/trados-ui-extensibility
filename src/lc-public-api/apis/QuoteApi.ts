/* tslint:disable */
/* eslint-disable */
/**
 * RWS Language Cloud API
 * The RWS Language Cloud public API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ExportQuoteReportResponse,
  PollQuoteReportExport200Response,
} from '../models/index';

export interface DownloadQuoteReportRequest {
    projectId: string;
    authorization: string;
    xLCTenant: string;
    format?: DownloadQuoteReportFormatEnum;
    exportId?: string;
}

export interface ExportQuoteReportRequest {
    projectId: string;
    authorization: string;
    xLCTenant: string;
    format?: ExportQuoteReportFormatEnum;
    languageId?: ExportQuoteReportLanguageIdEnum;
}

export interface PollQuoteReportExportRequest {
    projectId: string;
    authorization: string;
    xLCTenant: string;
    format?: PollQuoteReportExportFormatEnum;
    exportId?: string;
}

/**
 * 
 */
export class QuoteApi extends runtime.BaseAPI {

    /**
     * Downloads a quote report generated by the [asynchronous export operation](../reference/Public-API.v1.json/paths/~1projects~1{projectId}~1quote-report~1export/post).   If the `exportId` query parameter is not provided, the last generated export quote will be downloaded.
     * Download Exported Quote Report
     */
    async downloadQuoteReportRaw(requestParameters: DownloadQuoteReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling downloadQuoteReport().'
            );
        }

        if (requestParameters['authorization'] == null) {
            throw new runtime.RequiredError(
                'authorization',
                'Required parameter "authorization" was null or undefined when calling downloadQuoteReport().'
            );
        }

        if (requestParameters['xLCTenant'] == null) {
            throw new runtime.RequiredError(
                'xLCTenant',
                'Required parameter "xLCTenant" was null or undefined when calling downloadQuoteReport().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        if (requestParameters['exportId'] != null) {
            queryParameters['exportId'] = requestParameters['exportId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xLCTenant'] != null) {
            headerParameters['X-LC-Tenant'] = String(requestParameters['xLCTenant']);
        }

        const response = await this.request({
            path: `/projects/{projectId}/quote-report/download`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters['projectId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     * Downloads a quote report generated by the [asynchronous export operation](../reference/Public-API.v1.json/paths/~1projects~1{projectId}~1quote-report~1export/post).   If the `exportId` query parameter is not provided, the last generated export quote will be downloaded.
     * Download Exported Quote Report
     */
    async downloadQuoteReport(requestParameters: DownloadQuoteReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.downloadQuoteReportRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Generates an asynchronous quote export operation for the project in either PDF or Excel format. Use the [polling endpoint](../reference/Public-API.v1.json/paths/~1projects~1{projectId}~1quote-report~1export/get) to check when the export is completed.  
     * Export Quote Report
     */
    async exportQuoteReportRaw(requestParameters: ExportQuoteReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExportQuoteReportResponse>> {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling exportQuoteReport().'
            );
        }

        if (requestParameters['authorization'] == null) {
            throw new runtime.RequiredError(
                'authorization',
                'Required parameter "authorization" was null or undefined when calling exportQuoteReport().'
            );
        }

        if (requestParameters['xLCTenant'] == null) {
            throw new runtime.RequiredError(
                'xLCTenant',
                'Required parameter "xLCTenant" was null or undefined when calling exportQuoteReport().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        if (requestParameters['languageId'] != null) {
            queryParameters['languageId'] = requestParameters['languageId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xLCTenant'] != null) {
            headerParameters['X-LC-Tenant'] = String(requestParameters['xLCTenant']);
        }

        const response = await this.request({
            path: `/projects/{projectId}/quote-report/export`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters['projectId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Generates an asynchronous quote export operation for the project in either PDF or Excel format. Use the [polling endpoint](../reference/Public-API.v1.json/paths/~1projects~1{projectId}~1quote-report~1export/get) to check when the export is completed.  
     * Export Quote Report
     */
    async exportQuoteReport(requestParameters: ExportQuoteReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExportQuoteReportResponse> {
        const response = await this.exportQuoteReportRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Polls a quote report via an export operation. The quote report can be [downloaded](../reference/Public-API.v1.json/paths/~1projects~1{projectId}~1quote-report~1download/get) once the status is \"completed\". The recommended polling interval is 20 seconds. If polling does not return a success status in 20 minutes, it should be abandoned and a new export should be retried.  If the `exportId` query parameter is not provided, the polling action will return the status for the last generated export.
     * Poll Quote Report Export
     */
    async pollQuoteReportExportRaw(requestParameters: PollQuoteReportExportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PollQuoteReportExport200Response>> {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling pollQuoteReportExport().'
            );
        }

        if (requestParameters['authorization'] == null) {
            throw new runtime.RequiredError(
                'authorization',
                'Required parameter "authorization" was null or undefined when calling pollQuoteReportExport().'
            );
        }

        if (requestParameters['xLCTenant'] == null) {
            throw new runtime.RequiredError(
                'xLCTenant',
                'Required parameter "xLCTenant" was null or undefined when calling pollQuoteReportExport().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        if (requestParameters['exportId'] != null) {
            queryParameters['exportId'] = requestParameters['exportId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xLCTenant'] != null) {
            headerParameters['X-LC-Tenant'] = String(requestParameters['xLCTenant']);
        }

        const response = await this.request({
            path: `/projects/{projectId}/quote-report/export`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters['projectId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Polls a quote report via an export operation. The quote report can be [downloaded](../reference/Public-API.v1.json/paths/~1projects~1{projectId}~1quote-report~1download/get) once the status is \"completed\". The recommended polling interval is 20 seconds. If polling does not return a success status in 20 minutes, it should be abandoned and a new export should be retried.  If the `exportId` query parameter is not provided, the polling action will return the status for the last generated export.
     * Poll Quote Report Export
     */
    async pollQuoteReportExport(requestParameters: PollQuoteReportExportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PollQuoteReportExport200Response> {
        const response = await this.pollQuoteReportExportRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const DownloadQuoteReportFormatEnum = {
    Pdf: 'pdf',
    Excel: 'excel'
} as const;
export type DownloadQuoteReportFormatEnum = typeof DownloadQuoteReportFormatEnum[keyof typeof DownloadQuoteReportFormatEnum];
/**
 * @export
 */
export const ExportQuoteReportFormatEnum = {
    Pdf: 'pdf',
    Excel: 'excel'
} as const;
export type ExportQuoteReportFormatEnum = typeof ExportQuoteReportFormatEnum[keyof typeof ExportQuoteReportFormatEnum];
/**
 * @export
 */
export const ExportQuoteReportLanguageIdEnum = {
    En: 'en',
    De: 'de',
    Fr: 'fr',
    FrCa: 'fr-CA',
    Ja: 'ja',
    Es: 'es',
    ZhCn: 'zh-CN',
    Nl: 'nl',
    It: 'it'
} as const;
export type ExportQuoteReportLanguageIdEnum = typeof ExportQuoteReportLanguageIdEnum[keyof typeof ExportQuoteReportLanguageIdEnum];
/**
 * @export
 */
export const PollQuoteReportExportFormatEnum = {
    Pdf: 'pdf',
    Excel: 'excel'
} as const;
export type PollQuoteReportExportFormatEnum = typeof PollQuoteReportExportFormatEnum[keyof typeof PollQuoteReportExportFormatEnum];
