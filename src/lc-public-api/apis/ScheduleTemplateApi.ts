/* tslint:disable */
/* eslint-disable */
/**
 * RWS Language Cloud API
 * The RWS Language Cloud public API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ListScheduleTemplatesResponse,
  ScheduleTemplate,
  ScheduleTemplateCreateRequest,
  ScheduleTemplateUpdateRequest,
} from '../models/index';

export interface CreateScheduleTemplateRequest {
    authorization: string;
    xLCTenant: string;
    fields?: string;
    scheduleTemplateCreateRequest?: ScheduleTemplateCreateRequest;
}

export interface DeleteScheduleTemplateRequest {
    scheduleTemplateId: string;
    authorization: string;
    xLCTenant: string;
}

export interface GetScheduleTemplateRequest {
    scheduleTemplateId: string;
    authorization: string;
    xLCTenant: string;
    fields?: string;
}

export interface ListScheduleTemplatesRequest {
    authorization: string;
    xLCTenant: string;
    top?: number;
    skip?: number;
    fields?: string;
    name?: string;
    location?: Array<string>;
    locationStrategy?: ListScheduleTemplatesLocationStrategyEnum;
}

export interface UpdateScheduleTemplateRequest {
    scheduleTemplateId: string;
    authorization: string;
    xLCTenant: string;
    scheduleTemplateUpdateRequest?: ScheduleTemplateUpdateRequest;
}

/**
 * 
 */
export class ScheduleTemplateApi extends runtime.BaseAPI {

    /**
     * Creates a new schedule template.
     * Create Schedule Template
     */
    async createScheduleTemplateRaw(requestParameters: CreateScheduleTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ScheduleTemplate>> {
        if (requestParameters['authorization'] == null) {
            throw new runtime.RequiredError(
                'authorization',
                'Required parameter "authorization" was null or undefined when calling createScheduleTemplate().'
            );
        }

        if (requestParameters['xLCTenant'] == null) {
            throw new runtime.RequiredError(
                'xLCTenant',
                'Required parameter "xLCTenant" was null or undefined when calling createScheduleTemplate().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xLCTenant'] != null) {
            headerParameters['X-LC-Tenant'] = String(requestParameters['xLCTenant']);
        }

        const response = await this.request({
            path: `/schedule-templates`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['scheduleTemplateCreateRequest'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Creates a new schedule template.
     * Create Schedule Template
     */
    async createScheduleTemplate(requestParameters: CreateScheduleTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ScheduleTemplate> {
        const response = await this.createScheduleTemplateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a schedule template.
     * Delete Schedule Template
     */
    async deleteScheduleTemplateRaw(requestParameters: DeleteScheduleTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['scheduleTemplateId'] == null) {
            throw new runtime.RequiredError(
                'scheduleTemplateId',
                'Required parameter "scheduleTemplateId" was null or undefined when calling deleteScheduleTemplate().'
            );
        }

        if (requestParameters['authorization'] == null) {
            throw new runtime.RequiredError(
                'authorization',
                'Required parameter "authorization" was null or undefined when calling deleteScheduleTemplate().'
            );
        }

        if (requestParameters['xLCTenant'] == null) {
            throw new runtime.RequiredError(
                'xLCTenant',
                'Required parameter "xLCTenant" was null or undefined when calling deleteScheduleTemplate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xLCTenant'] != null) {
            headerParameters['X-LC-Tenant'] = String(requestParameters['xLCTenant']);
        }

        const response = await this.request({
            path: `/schedule-templates/{scheduleTemplateId}`.replace(`{${"scheduleTemplateId"}}`, encodeURIComponent(String(requestParameters['scheduleTemplateId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a schedule template.
     * Delete Schedule Template
     */
    async deleteScheduleTemplate(requestParameters: DeleteScheduleTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteScheduleTemplateRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves a schedule template by identifier.
     * Get Schedule Template
     */
    async getScheduleTemplateRaw(requestParameters: GetScheduleTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ScheduleTemplate>> {
        if (requestParameters['scheduleTemplateId'] == null) {
            throw new runtime.RequiredError(
                'scheduleTemplateId',
                'Required parameter "scheduleTemplateId" was null or undefined when calling getScheduleTemplate().'
            );
        }

        if (requestParameters['authorization'] == null) {
            throw new runtime.RequiredError(
                'authorization',
                'Required parameter "authorization" was null or undefined when calling getScheduleTemplate().'
            );
        }

        if (requestParameters['xLCTenant'] == null) {
            throw new runtime.RequiredError(
                'xLCTenant',
                'Required parameter "xLCTenant" was null or undefined when calling getScheduleTemplate().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xLCTenant'] != null) {
            headerParameters['X-LC-Tenant'] = String(requestParameters['xLCTenant']);
        }

        const response = await this.request({
            path: `/schedule-templates/{scheduleTemplateId}`.replace(`{${"scheduleTemplateId"}}`, encodeURIComponent(String(requestParameters['scheduleTemplateId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves a schedule template by identifier.
     * Get Schedule Template
     */
    async getScheduleTemplate(requestParameters: GetScheduleTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ScheduleTemplate> {
        const response = await this.getScheduleTemplateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a list of all the schedule templates in an account.
     * List Schedule Templates
     */
    async listScheduleTemplatesRaw(requestParameters: ListScheduleTemplatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListScheduleTemplatesResponse>> {
        if (requestParameters['authorization'] == null) {
            throw new runtime.RequiredError(
                'authorization',
                'Required parameter "authorization" was null or undefined when calling listScheduleTemplates().'
            );
        }

        if (requestParameters['xLCTenant'] == null) {
            throw new runtime.RequiredError(
                'xLCTenant',
                'Required parameter "xLCTenant" was null or undefined when calling listScheduleTemplates().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['top'] != null) {
            queryParameters['top'] = requestParameters['top'];
        }

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        if (requestParameters['location'] != null) {
            queryParameters['location'] = requestParameters['location']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['locationStrategy'] != null) {
            queryParameters['locationStrategy'] = requestParameters['locationStrategy'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xLCTenant'] != null) {
            headerParameters['X-LC-Tenant'] = String(requestParameters['xLCTenant']);
        }

        const response = await this.request({
            path: `/schedule-templates`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves a list of all the schedule templates in an account.
     * List Schedule Templates
     */
    async listScheduleTemplates(requestParameters: ListScheduleTemplatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListScheduleTemplatesResponse> {
        const response = await this.listScheduleTemplatesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates the schedule template identified by `scheduleTemplateId`.
     * Update Schedule Template
     */
    async updateScheduleTemplateRaw(requestParameters: UpdateScheduleTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['scheduleTemplateId'] == null) {
            throw new runtime.RequiredError(
                'scheduleTemplateId',
                'Required parameter "scheduleTemplateId" was null or undefined when calling updateScheduleTemplate().'
            );
        }

        if (requestParameters['authorization'] == null) {
            throw new runtime.RequiredError(
                'authorization',
                'Required parameter "authorization" was null or undefined when calling updateScheduleTemplate().'
            );
        }

        if (requestParameters['xLCTenant'] == null) {
            throw new runtime.RequiredError(
                'xLCTenant',
                'Required parameter "xLCTenant" was null or undefined when calling updateScheduleTemplate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xLCTenant'] != null) {
            headerParameters['X-LC-Tenant'] = String(requestParameters['xLCTenant']);
        }

        const response = await this.request({
            path: `/schedule-templates/{scheduleTemplateId}`.replace(`{${"scheduleTemplateId"}}`, encodeURIComponent(String(requestParameters['scheduleTemplateId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['scheduleTemplateUpdateRequest'],
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates the schedule template identified by `scheduleTemplateId`.
     * Update Schedule Template
     */
    async updateScheduleTemplate(requestParameters: UpdateScheduleTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateScheduleTemplateRaw(requestParameters, initOverrides);
    }

}

/**
 * @export
 */
export const ListScheduleTemplatesLocationStrategyEnum = {
    Location: 'location',
    Lineage: 'lineage',
    Bloodline: 'bloodline',
    Genealogy: 'genealogy'
} as const;
export type ListScheduleTemplatesLocationStrategyEnum = typeof ListScheduleTemplatesLocationStrategyEnum[keyof typeof ListScheduleTemplatesLocationStrategyEnum];
