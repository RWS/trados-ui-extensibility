/* tslint:disable */
/* eslint-disable */
/**
 * RWS Language Cloud API
 * The RWS Language Cloud public API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddProjectsToGroupRequest,
  AddProjectsToGroupResponse,
  ListProjectGroupsResponse,
  ProjectGroup,
  ProjectGroupCreateRequest,
  ProjectGroupCreateResponse,
  ProjectGroupUpdateRequest,
  RemoveProjectsFromGroupRequest,
} from '../models/index';

export interface AddProjectsToGroupOperationRequest {
    projectGroupId: string;
    authorization: string;
    xLCTenant: string;
    addProjectsToGroupRequest: AddProjectsToGroupRequest;
    fields?: string;
}

export interface CreateProjectGroupRequest {
    authorization: string;
    xLCTenant: string;
    projectGroupCreateRequest: ProjectGroupCreateRequest;
    fields?: string;
}

export interface DeleteProjectGroupRequest {
    projectGroupId: string;
    authorization: string;
    xLCTenant: string;
}

export interface GetProjectGroupRequest {
    projectGroupId: string;
    authorization: string;
    xLCTenant: string;
    fields?: string;
}

export interface ListProjectGroupsRequest {
    authorization: string;
    xLCTenant: string;
    top?: number;
    skip?: number;
    location?: Array<string>;
    locationStrategy?: ListProjectGroupsLocationStrategyEnum;
    fields?: string;
}

export interface RemoveProjectsFromGroupOperationRequest {
    projectGroupId: string;
    authorization: string;
    xLCTenant: string;
    removeProjectsFromGroupRequest?: RemoveProjectsFromGroupRequest;
}

export interface UpdateProjectGroupRequest {
    projectGroupId: string;
    authorization: string;
    xLCTenant: string;
    projectGroupUpdateRequest: ProjectGroupUpdateRequest;
}

/**
 * 
 */
export class ProjectGroupApi extends runtime.BaseAPI {

    /**
     * Adds projects to the project group.  The projects are not added instantly. To check the status use the [Get Project Group](../reference/Public-API.v1.json/paths/~1project-groups~1{projectGroupId}/get) endpoint.
     * Add Projects To Group
     */
    async addProjectsToGroupRaw(requestParameters: AddProjectsToGroupOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AddProjectsToGroupResponse>> {
        if (requestParameters['projectGroupId'] == null) {
            throw new runtime.RequiredError(
                'projectGroupId',
                'Required parameter "projectGroupId" was null or undefined when calling addProjectsToGroup().'
            );
        }

        if (requestParameters['authorization'] == null) {
            throw new runtime.RequiredError(
                'authorization',
                'Required parameter "authorization" was null or undefined when calling addProjectsToGroup().'
            );
        }

        if (requestParameters['xLCTenant'] == null) {
            throw new runtime.RequiredError(
                'xLCTenant',
                'Required parameter "xLCTenant" was null or undefined when calling addProjectsToGroup().'
            );
        }

        if (requestParameters['addProjectsToGroupRequest'] == null) {
            throw new runtime.RequiredError(
                'addProjectsToGroupRequest',
                'Required parameter "addProjectsToGroupRequest" was null or undefined when calling addProjectsToGroup().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xLCTenant'] != null) {
            headerParameters['X-LC-Tenant'] = String(requestParameters['xLCTenant']);
        }

        const response = await this.request({
            path: `/project-groups/{projectGroupId}/projects`.replace(`{${"projectGroupId"}}`, encodeURIComponent(String(requestParameters['projectGroupId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['addProjectsToGroupRequest'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Adds projects to the project group.  The projects are not added instantly. To check the status use the [Get Project Group](../reference/Public-API.v1.json/paths/~1project-groups~1{projectGroupId}/get) endpoint.
     * Add Projects To Group
     */
    async addProjectsToGroup(requestParameters: AddProjectsToGroupOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AddProjectsToGroupResponse> {
        const response = await this.addProjectsToGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a new project group.
     * Create Project Group
     */
    async createProjectGroupRaw(requestParameters: CreateProjectGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProjectGroupCreateResponse>> {
        if (requestParameters['authorization'] == null) {
            throw new runtime.RequiredError(
                'authorization',
                'Required parameter "authorization" was null or undefined when calling createProjectGroup().'
            );
        }

        if (requestParameters['xLCTenant'] == null) {
            throw new runtime.RequiredError(
                'xLCTenant',
                'Required parameter "xLCTenant" was null or undefined when calling createProjectGroup().'
            );
        }

        if (requestParameters['projectGroupCreateRequest'] == null) {
            throw new runtime.RequiredError(
                'projectGroupCreateRequest',
                'Required parameter "projectGroupCreateRequest" was null or undefined when calling createProjectGroup().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xLCTenant'] != null) {
            headerParameters['X-LC-Tenant'] = String(requestParameters['xLCTenant']);
        }

        const response = await this.request({
            path: `/project-groups`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['projectGroupCreateRequest'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Creates a new project group.
     * Create Project Group
     */
    async createProjectGroup(requestParameters: CreateProjectGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProjectGroupCreateResponse> {
        const response = await this.createProjectGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a project group.
     * Delete Project Group
     */
    async deleteProjectGroupRaw(requestParameters: DeleteProjectGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['projectGroupId'] == null) {
            throw new runtime.RequiredError(
                'projectGroupId',
                'Required parameter "projectGroupId" was null or undefined when calling deleteProjectGroup().'
            );
        }

        if (requestParameters['authorization'] == null) {
            throw new runtime.RequiredError(
                'authorization',
                'Required parameter "authorization" was null or undefined when calling deleteProjectGroup().'
            );
        }

        if (requestParameters['xLCTenant'] == null) {
            throw new runtime.RequiredError(
                'xLCTenant',
                'Required parameter "xLCTenant" was null or undefined when calling deleteProjectGroup().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xLCTenant'] != null) {
            headerParameters['X-LC-Tenant'] = String(requestParameters['xLCTenant']);
        }

        const response = await this.request({
            path: `/project-groups/{projectGroupId}`.replace(`{${"projectGroupId"}}`, encodeURIComponent(String(requestParameters['projectGroupId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a project group.
     * Delete Project Group
     */
    async deleteProjectGroup(requestParameters: DeleteProjectGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteProjectGroupRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves a project group by identifier.
     * Get Project Group
     */
    async getProjectGroupRaw(requestParameters: GetProjectGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProjectGroup>> {
        if (requestParameters['projectGroupId'] == null) {
            throw new runtime.RequiredError(
                'projectGroupId',
                'Required parameter "projectGroupId" was null or undefined when calling getProjectGroup().'
            );
        }

        if (requestParameters['authorization'] == null) {
            throw new runtime.RequiredError(
                'authorization',
                'Required parameter "authorization" was null or undefined when calling getProjectGroup().'
            );
        }

        if (requestParameters['xLCTenant'] == null) {
            throw new runtime.RequiredError(
                'xLCTenant',
                'Required parameter "xLCTenant" was null or undefined when calling getProjectGroup().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xLCTenant'] != null) {
            headerParameters['X-LC-Tenant'] = String(requestParameters['xLCTenant']);
        }

        const response = await this.request({
            path: `/project-groups/{projectGroupId}`.replace(`{${"projectGroupId"}}`, encodeURIComponent(String(requestParameters['projectGroupId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves a project group by identifier.
     * Get Project Group
     */
    async getProjectGroup(requestParameters: GetProjectGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProjectGroup> {
        const response = await this.getProjectGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a list of all the project groups in an account.
     * List Project Groups
     */
    async listProjectGroupsRaw(requestParameters: ListProjectGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListProjectGroupsResponse>> {
        if (requestParameters['authorization'] == null) {
            throw new runtime.RequiredError(
                'authorization',
                'Required parameter "authorization" was null or undefined when calling listProjectGroups().'
            );
        }

        if (requestParameters['xLCTenant'] == null) {
            throw new runtime.RequiredError(
                'xLCTenant',
                'Required parameter "xLCTenant" was null or undefined when calling listProjectGroups().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['top'] != null) {
            queryParameters['top'] = requestParameters['top'];
        }

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['location'] != null) {
            queryParameters['location'] = requestParameters['location']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['locationStrategy'] != null) {
            queryParameters['locationStrategy'] = requestParameters['locationStrategy'];
        }

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xLCTenant'] != null) {
            headerParameters['X-LC-Tenant'] = String(requestParameters['xLCTenant']);
        }

        const response = await this.request({
            path: `/project-groups`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves a list of all the project groups in an account.
     * List Project Groups
     */
    async listProjectGroups(requestParameters: ListProjectGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListProjectGroupsResponse> {
        const response = await this.listProjectGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Removes projects from the project group.  The projects are not removed instantly. To check the status use the [Get Project Group](../reference/Public-API.v1.json/paths/~1project-groups~1{projectGroupId}/get) endpoint.
     * Remove Projects From Group
     */
    async removeProjectsFromGroupRaw(requestParameters: RemoveProjectsFromGroupOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['projectGroupId'] == null) {
            throw new runtime.RequiredError(
                'projectGroupId',
                'Required parameter "projectGroupId" was null or undefined when calling removeProjectsFromGroup().'
            );
        }

        if (requestParameters['authorization'] == null) {
            throw new runtime.RequiredError(
                'authorization',
                'Required parameter "authorization" was null or undefined when calling removeProjectsFromGroup().'
            );
        }

        if (requestParameters['xLCTenant'] == null) {
            throw new runtime.RequiredError(
                'xLCTenant',
                'Required parameter "xLCTenant" was null or undefined when calling removeProjectsFromGroup().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xLCTenant'] != null) {
            headerParameters['X-LC-Tenant'] = String(requestParameters['xLCTenant']);
        }

        const response = await this.request({
            path: `/project-groups/{projectGroupId}/projects`.replace(`{${"projectGroupId"}}`, encodeURIComponent(String(requestParameters['projectGroupId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['removeProjectsFromGroupRequest'],
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Removes projects from the project group.  The projects are not removed instantly. To check the status use the [Get Project Group](../reference/Public-API.v1.json/paths/~1project-groups~1{projectGroupId}/get) endpoint.
     * Remove Projects From Group
     */
    async removeProjectsFromGroup(requestParameters: RemoveProjectsFromGroupOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.removeProjectsFromGroupRaw(requestParameters, initOverrides);
    }

    /**
     * Updates the project group.
     * Update Project Group
     */
    async updateProjectGroupRaw(requestParameters: UpdateProjectGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['projectGroupId'] == null) {
            throw new runtime.RequiredError(
                'projectGroupId',
                'Required parameter "projectGroupId" was null or undefined when calling updateProjectGroup().'
            );
        }

        if (requestParameters['authorization'] == null) {
            throw new runtime.RequiredError(
                'authorization',
                'Required parameter "authorization" was null or undefined when calling updateProjectGroup().'
            );
        }

        if (requestParameters['xLCTenant'] == null) {
            throw new runtime.RequiredError(
                'xLCTenant',
                'Required parameter "xLCTenant" was null or undefined when calling updateProjectGroup().'
            );
        }

        if (requestParameters['projectGroupUpdateRequest'] == null) {
            throw new runtime.RequiredError(
                'projectGroupUpdateRequest',
                'Required parameter "projectGroupUpdateRequest" was null or undefined when calling updateProjectGroup().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xLCTenant'] != null) {
            headerParameters['X-LC-Tenant'] = String(requestParameters['xLCTenant']);
        }

        const response = await this.request({
            path: `/project-groups/{projectGroupId}`.replace(`{${"projectGroupId"}}`, encodeURIComponent(String(requestParameters['projectGroupId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['projectGroupUpdateRequest'],
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates the project group.
     * Update Project Group
     */
    async updateProjectGroup(requestParameters: UpdateProjectGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateProjectGroupRaw(requestParameters, initOverrides);
    }

}

/**
 * @export
 */
export const ListProjectGroupsLocationStrategyEnum = {
    Location: 'location',
    Lineage: 'lineage',
    Bloodline: 'bloodline',
    Genealogy: 'genealogy'
} as const;
export type ListProjectGroupsLocationStrategyEnum = typeof ListProjectGroupsLocationStrategyEnum[keyof typeof ListProjectGroupsLocationStrategyEnum];
