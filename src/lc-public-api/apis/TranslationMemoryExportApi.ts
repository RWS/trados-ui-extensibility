/* tslint:disable */
/* eslint-disable */
/**
 * RWS Language Cloud API
 * The RWS Language Cloud public API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  TranslationMemoryExportRequest,
  TranslationMemoryExportResponse,
} from '../models/index';

export interface DownloadExportedTranslationMemoryRequest {
    exportId: string;
    authorization: string;
    xLCTenant: string;
}

export interface ExportTranslationMemoryRequest {
    translationMemoryId: string;
    authorization: string;
    xLCTenant: string;
    translationMemoryExportRequest?: TranslationMemoryExportRequest;
}

export interface PollTranslationMemoryExportRequest {
    exportId: string;
    authorization: string;
    xLCTenant: string;
}

/**
 * 
 */
export class TranslationMemoryExportApi extends runtime.BaseAPI {

    /**
     * Downloads the exported translation memory in the `tmx.gz` format when the poll operation status is `done`.
     * Download Exported Translation Memory
     */
    async downloadExportedTranslationMemoryRaw(requestParameters: DownloadExportedTranslationMemoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters['exportId'] == null) {
            throw new runtime.RequiredError(
                'exportId',
                'Required parameter "exportId" was null or undefined when calling downloadExportedTranslationMemory().'
            );
        }

        if (requestParameters['authorization'] == null) {
            throw new runtime.RequiredError(
                'authorization',
                'Required parameter "authorization" was null or undefined when calling downloadExportedTranslationMemory().'
            );
        }

        if (requestParameters['xLCTenant'] == null) {
            throw new runtime.RequiredError(
                'xLCTenant',
                'Required parameter "xLCTenant" was null or undefined when calling downloadExportedTranslationMemory().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xLCTenant'] != null) {
            headerParameters['X-LC-Tenant'] = String(requestParameters['xLCTenant']);
        }

        const response = await this.request({
            path: `/translation-memory/exports/{exportId}/download`.replace(`{${"exportId"}}`, encodeURIComponent(String(requestParameters['exportId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     * Downloads the exported translation memory in the `tmx.gz` format when the poll operation status is `done`.
     * Download Exported Translation Memory
     */
    async downloadExportedTranslationMemory(requestParameters: DownloadExportedTranslationMemoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.downloadExportedTranslationMemoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Generates an asynchronous export operation. Use the [Poll Translation Memory Export](../reference/Public-API.v1.json/paths/~1translation-memory~1exports~1{exportId}/get) endpoint to poll until the export status is `done`.
     * Export Translation Memory
     */
    async exportTranslationMemoryRaw(requestParameters: ExportTranslationMemoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TranslationMemoryExportResponse>> {
        if (requestParameters['translationMemoryId'] == null) {
            throw new runtime.RequiredError(
                'translationMemoryId',
                'Required parameter "translationMemoryId" was null or undefined when calling exportTranslationMemory().'
            );
        }

        if (requestParameters['authorization'] == null) {
            throw new runtime.RequiredError(
                'authorization',
                'Required parameter "authorization" was null or undefined when calling exportTranslationMemory().'
            );
        }

        if (requestParameters['xLCTenant'] == null) {
            throw new runtime.RequiredError(
                'xLCTenant',
                'Required parameter "xLCTenant" was null or undefined when calling exportTranslationMemory().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xLCTenant'] != null) {
            headerParameters['X-LC-Tenant'] = String(requestParameters['xLCTenant']);
        }

        const response = await this.request({
            path: `/translation-memory/{translationMemoryId}/exports`.replace(`{${"translationMemoryId"}}`, encodeURIComponent(String(requestParameters['translationMemoryId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['translationMemoryExportRequest'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Generates an asynchronous export operation. Use the [Poll Translation Memory Export](../reference/Public-API.v1.json/paths/~1translation-memory~1exports~1{exportId}/get) endpoint to poll until the export status is `done`.
     * Export Translation Memory
     */
    async exportTranslationMemory(requestParameters: ExportTranslationMemoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TranslationMemoryExportResponse> {
        const response = await this.exportTranslationMemoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Polls a translation memory via an export operation. The exported translation memory can be downloaded once the status is `done`.
     * Poll Translation Memory Export
     */
    async pollTranslationMemoryExportRaw(requestParameters: PollTranslationMemoryExportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TranslationMemoryExportResponse>> {
        if (requestParameters['exportId'] == null) {
            throw new runtime.RequiredError(
                'exportId',
                'Required parameter "exportId" was null or undefined when calling pollTranslationMemoryExport().'
            );
        }

        if (requestParameters['authorization'] == null) {
            throw new runtime.RequiredError(
                'authorization',
                'Required parameter "authorization" was null or undefined when calling pollTranslationMemoryExport().'
            );
        }

        if (requestParameters['xLCTenant'] == null) {
            throw new runtime.RequiredError(
                'xLCTenant',
                'Required parameter "xLCTenant" was null or undefined when calling pollTranslationMemoryExport().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xLCTenant'] != null) {
            headerParameters['X-LC-Tenant'] = String(requestParameters['xLCTenant']);
        }

        const response = await this.request({
            path: `/translation-memory/exports/{exportId}`.replace(`{${"exportId"}}`, encodeURIComponent(String(requestParameters['exportId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Polls a translation memory via an export operation. The exported translation memory can be downloaded once the status is `done`.
     * Poll Translation Memory Export
     */
    async pollTranslationMemoryExport(requestParameters: PollTranslationMemoryExportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TranslationMemoryExportResponse> {
        const response = await this.pollTranslationMemoryExportRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
