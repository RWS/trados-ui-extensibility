/* tslint:disable */
/* eslint-disable */
/**
 * RWS Language Cloud API
 * The RWS Language Cloud public API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ListProjectTemplatesResponse,
  ProjectTemplateCreateRequest,
  ProjectTemplateResponse,
  ProjectTemplateUpdateRequest,
} from '../models/index';

export interface CreateProjectTemplateRequest {
    authorization: string;
    xLCTenant: string;
    projectTemplateCreateRequest: ProjectTemplateCreateRequest;
    fields?: string;
}

export interface DeleteProjectTemplateRequest {
    projectTemplateId: string;
    authorization: string;
    xLCTenant: string;
}

export interface GetProjectTemplateRequest {
    projectTemplateId: string;
    authorization: string;
    xLCTenant: string;
    fields?: string;
}

export interface ListProjectTemplatesRequest {
    authorization: string;
    xLCTenant: string;
    name?: string;
    top?: number;
    skip?: number;
    location?: Array<string>;
    locationStrategy?: ListProjectTemplatesLocationStrategyEnum;
    sort?: string;
    fields?: string;
}

export interface UpdateProjectTemplateRequest {
    projectTemplateId: string;
    authorization: string;
    xLCTenant: string;
    projectTemplateUpdateRequest: ProjectTemplateUpdateRequest;
}

/**
 * 
 */
export class ProjectTemplateApi extends runtime.BaseAPI {

    /**
     * Creates a new project template.
     * Create Project Template
     */
    async createProjectTemplateRaw(requestParameters: CreateProjectTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProjectTemplateResponse>> {
        if (requestParameters['authorization'] == null) {
            throw new runtime.RequiredError(
                'authorization',
                'Required parameter "authorization" was null or undefined when calling createProjectTemplate().'
            );
        }

        if (requestParameters['xLCTenant'] == null) {
            throw new runtime.RequiredError(
                'xLCTenant',
                'Required parameter "xLCTenant" was null or undefined when calling createProjectTemplate().'
            );
        }

        if (requestParameters['projectTemplateCreateRequest'] == null) {
            throw new runtime.RequiredError(
                'projectTemplateCreateRequest',
                'Required parameter "projectTemplateCreateRequest" was null or undefined when calling createProjectTemplate().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xLCTenant'] != null) {
            headerParameters['X-LC-Tenant'] = String(requestParameters['xLCTenant']);
        }

        const response = await this.request({
            path: `/project-templates`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['projectTemplateCreateRequest'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Creates a new project template.
     * Create Project Template
     */
    async createProjectTemplate(requestParameters: CreateProjectTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProjectTemplateResponse> {
        const response = await this.createProjectTemplateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a project template by id.
     * Delete Project Template
     */
    async deleteProjectTemplateRaw(requestParameters: DeleteProjectTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['projectTemplateId'] == null) {
            throw new runtime.RequiredError(
                'projectTemplateId',
                'Required parameter "projectTemplateId" was null or undefined when calling deleteProjectTemplate().'
            );
        }

        if (requestParameters['authorization'] == null) {
            throw new runtime.RequiredError(
                'authorization',
                'Required parameter "authorization" was null or undefined when calling deleteProjectTemplate().'
            );
        }

        if (requestParameters['xLCTenant'] == null) {
            throw new runtime.RequiredError(
                'xLCTenant',
                'Required parameter "xLCTenant" was null or undefined when calling deleteProjectTemplate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xLCTenant'] != null) {
            headerParameters['X-LC-Tenant'] = String(requestParameters['xLCTenant']);
        }

        const response = await this.request({
            path: `/project-templates/{projectTemplateId}`.replace(`{${"projectTemplateId"}}`, encodeURIComponent(String(requestParameters['projectTemplateId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a project template by id.
     * Delete Project Template
     */
    async deleteProjectTemplate(requestParameters: DeleteProjectTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteProjectTemplateRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves a project template by identifier.
     * Get Project Template
     */
    async getProjectTemplateRaw(requestParameters: GetProjectTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProjectTemplateResponse>> {
        if (requestParameters['projectTemplateId'] == null) {
            throw new runtime.RequiredError(
                'projectTemplateId',
                'Required parameter "projectTemplateId" was null or undefined when calling getProjectTemplate().'
            );
        }

        if (requestParameters['authorization'] == null) {
            throw new runtime.RequiredError(
                'authorization',
                'Required parameter "authorization" was null or undefined when calling getProjectTemplate().'
            );
        }

        if (requestParameters['xLCTenant'] == null) {
            throw new runtime.RequiredError(
                'xLCTenant',
                'Required parameter "xLCTenant" was null or undefined when calling getProjectTemplate().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xLCTenant'] != null) {
            headerParameters['X-LC-Tenant'] = String(requestParameters['xLCTenant']);
        }

        const response = await this.request({
            path: `/project-templates/{projectTemplateId}`.replace(`{${"projectTemplateId"}}`, encodeURIComponent(String(requestParameters['projectTemplateId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves a project template by identifier.
     * Get Project Template
     */
    async getProjectTemplate(requestParameters: GetProjectTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProjectTemplateResponse> {
        const response = await this.getProjectTemplateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a list of all the project templates in an account.
     * List Project Templates
     */
    async listProjectTemplatesRaw(requestParameters: ListProjectTemplatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListProjectTemplatesResponse>> {
        if (requestParameters['authorization'] == null) {
            throw new runtime.RequiredError(
                'authorization',
                'Required parameter "authorization" was null or undefined when calling listProjectTemplates().'
            );
        }

        if (requestParameters['xLCTenant'] == null) {
            throw new runtime.RequiredError(
                'xLCTenant',
                'Required parameter "xLCTenant" was null or undefined when calling listProjectTemplates().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        if (requestParameters['top'] != null) {
            queryParameters['top'] = requestParameters['top'];
        }

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['location'] != null) {
            queryParameters['location'] = requestParameters['location']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['locationStrategy'] != null) {
            queryParameters['locationStrategy'] = requestParameters['locationStrategy'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xLCTenant'] != null) {
            headerParameters['X-LC-Tenant'] = String(requestParameters['xLCTenant']);
        }

        const response = await this.request({
            path: `/project-templates`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves a list of all the project templates in an account.
     * List Project Templates
     */
    async listProjectTemplates(requestParameters: ListProjectTemplatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListProjectTemplatesResponse> {
        const response = await this.listProjectTemplatesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a project template by id.
     * Update Project Template
     */
    async updateProjectTemplateRaw(requestParameters: UpdateProjectTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['projectTemplateId'] == null) {
            throw new runtime.RequiredError(
                'projectTemplateId',
                'Required parameter "projectTemplateId" was null or undefined when calling updateProjectTemplate().'
            );
        }

        if (requestParameters['authorization'] == null) {
            throw new runtime.RequiredError(
                'authorization',
                'Required parameter "authorization" was null or undefined when calling updateProjectTemplate().'
            );
        }

        if (requestParameters['xLCTenant'] == null) {
            throw new runtime.RequiredError(
                'xLCTenant',
                'Required parameter "xLCTenant" was null or undefined when calling updateProjectTemplate().'
            );
        }

        if (requestParameters['projectTemplateUpdateRequest'] == null) {
            throw new runtime.RequiredError(
                'projectTemplateUpdateRequest',
                'Required parameter "projectTemplateUpdateRequest" was null or undefined when calling updateProjectTemplate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xLCTenant'] != null) {
            headerParameters['X-LC-Tenant'] = String(requestParameters['xLCTenant']);
        }

        const response = await this.request({
            path: `/project-templates/{projectTemplateId}`.replace(`{${"projectTemplateId"}}`, encodeURIComponent(String(requestParameters['projectTemplateId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['projectTemplateUpdateRequest'],
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates a project template by id.
     * Update Project Template
     */
    async updateProjectTemplate(requestParameters: UpdateProjectTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateProjectTemplateRaw(requestParameters, initOverrides);
    }

}

/**
 * @export
 */
export const ListProjectTemplatesLocationStrategyEnum = {
    Location: 'location',
    Lineage: 'lineage',
    Bloodline: 'bloodline',
    Genealogy: 'genealogy'
} as const;
export type ListProjectTemplatesLocationStrategyEnum = typeof ListProjectTemplatesLocationStrategyEnum[keyof typeof ListProjectTemplatesLocationStrategyEnum];
