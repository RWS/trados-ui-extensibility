/* tslint:disable */
/* eslint-disable */
/**
 * RWS Language Cloud API
 * The RWS Language Cloud public API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ExportTermbaseRequest,
  TermbaseExportResponse,
} from '../models/index';

export interface DownloadExportedTermbaseRequest {
    termbaseId: string;
    exportId: string;
    authorization: string;
    xLCTenant: string;
}

export interface DownloadTermbaseDefinitionRequest {
    termbaseId: string;
    authorization: string;
    xLCTenant: string;
}

export interface ExportTermbaseOperationRequest {
    termbaseId: string;
    authorization: string;
    xLCTenant: string;
    exportTermbaseRequest?: ExportTermbaseRequest;
}

export interface PollExportTermbaseRequest {
    termbaseId: string;
    exportId: string;
    authorization: string;
    xLCTenant: string;
}

/**
 * 
 */
export class TermbaseExportApi extends runtime.BaseAPI {

    /**
     * Downloads the exported termbase when the poll operation status is `done`.
     * Download Exported Termbase
     */
    async downloadExportedTermbaseRaw(requestParameters: DownloadExportedTermbaseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters['termbaseId'] == null) {
            throw new runtime.RequiredError(
                'termbaseId',
                'Required parameter "termbaseId" was null or undefined when calling downloadExportedTermbase().'
            );
        }

        if (requestParameters['exportId'] == null) {
            throw new runtime.RequiredError(
                'exportId',
                'Required parameter "exportId" was null or undefined when calling downloadExportedTermbase().'
            );
        }

        if (requestParameters['authorization'] == null) {
            throw new runtime.RequiredError(
                'authorization',
                'Required parameter "authorization" was null or undefined when calling downloadExportedTermbase().'
            );
        }

        if (requestParameters['xLCTenant'] == null) {
            throw new runtime.RequiredError(
                'xLCTenant',
                'Required parameter "xLCTenant" was null or undefined when calling downloadExportedTermbase().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xLCTenant'] != null) {
            headerParameters['X-LC-Tenant'] = String(requestParameters['xLCTenant']);
        }

        const response = await this.request({
            path: `/termbases/{termbaseId}/exports/{exportId}/download`.replace(`{${"termbaseId"}}`, encodeURIComponent(String(requestParameters['termbaseId']))).replace(`{${"exportId"}}`, encodeURIComponent(String(requestParameters['exportId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     * Downloads the exported termbase when the poll operation status is `done`.
     * Download Exported Termbase
     */
    async downloadExportedTermbase(requestParameters: DownloadExportedTermbaseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.downloadExportedTermbaseRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Downloads the termbase definition.
     * Export Termbase Template
     */
    async downloadTermbaseDefinitionRaw(requestParameters: DownloadTermbaseDefinitionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters['termbaseId'] == null) {
            throw new runtime.RequiredError(
                'termbaseId',
                'Required parameter "termbaseId" was null or undefined when calling downloadTermbaseDefinition().'
            );
        }

        if (requestParameters['authorization'] == null) {
            throw new runtime.RequiredError(
                'authorization',
                'Required parameter "authorization" was null or undefined when calling downloadTermbaseDefinition().'
            );
        }

        if (requestParameters['xLCTenant'] == null) {
            throw new runtime.RequiredError(
                'xLCTenant',
                'Required parameter "xLCTenant" was null or undefined when calling downloadTermbaseDefinition().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xLCTenant'] != null) {
            headerParameters['X-LC-Tenant'] = String(requestParameters['xLCTenant']);
        }

        const response = await this.request({
            path: `/termbases/{termbaseId}/export-template`.replace(`{${"termbaseId"}}`, encodeURIComponent(String(requestParameters['termbaseId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     * Downloads the termbase definition.
     * Export Termbase Template
     */
    async downloadTermbaseDefinition(requestParameters: DownloadTermbaseDefinitionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.downloadTermbaseDefinitionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Generates an asynchronous export operation.<br> Use the Poll Export Termbase endpoint to poll until the export status is `done`.
     * Export Termbase
     */
    async exportTermbaseRaw(requestParameters: ExportTermbaseOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TermbaseExportResponse>> {
        if (requestParameters['termbaseId'] == null) {
            throw new runtime.RequiredError(
                'termbaseId',
                'Required parameter "termbaseId" was null or undefined when calling exportTermbase().'
            );
        }

        if (requestParameters['authorization'] == null) {
            throw new runtime.RequiredError(
                'authorization',
                'Required parameter "authorization" was null or undefined when calling exportTermbase().'
            );
        }

        if (requestParameters['xLCTenant'] == null) {
            throw new runtime.RequiredError(
                'xLCTenant',
                'Required parameter "xLCTenant" was null or undefined when calling exportTermbase().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xLCTenant'] != null) {
            headerParameters['X-LC-Tenant'] = String(requestParameters['xLCTenant']);
        }

        const response = await this.request({
            path: `/termbases/{termbaseId}/exports`.replace(`{${"termbaseId"}}`, encodeURIComponent(String(requestParameters['termbaseId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['exportTermbaseRequest'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Generates an asynchronous export operation.<br> Use the Poll Export Termbase endpoint to poll until the export status is `done`.
     * Export Termbase
     */
    async exportTermbase(requestParameters: ExportTermbaseOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TermbaseExportResponse> {
        const response = await this.exportTermbaseRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Polls a termbase via an export operation. The exported termbase can be downloaded once the status is `done`.
     * Poll Termbase Export
     */
    async pollExportTermbaseRaw(requestParameters: PollExportTermbaseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TermbaseExportResponse>> {
        if (requestParameters['termbaseId'] == null) {
            throw new runtime.RequiredError(
                'termbaseId',
                'Required parameter "termbaseId" was null or undefined when calling pollExportTermbase().'
            );
        }

        if (requestParameters['exportId'] == null) {
            throw new runtime.RequiredError(
                'exportId',
                'Required parameter "exportId" was null or undefined when calling pollExportTermbase().'
            );
        }

        if (requestParameters['authorization'] == null) {
            throw new runtime.RequiredError(
                'authorization',
                'Required parameter "authorization" was null or undefined when calling pollExportTermbase().'
            );
        }

        if (requestParameters['xLCTenant'] == null) {
            throw new runtime.RequiredError(
                'xLCTenant',
                'Required parameter "xLCTenant" was null or undefined when calling pollExportTermbase().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        if (requestParameters['xLCTenant'] != null) {
            headerParameters['X-LC-Tenant'] = String(requestParameters['xLCTenant']);
        }

        const response = await this.request({
            path: `/termbases/{termbaseId}/exports/{exportId}`.replace(`{${"termbaseId"}}`, encodeURIComponent(String(requestParameters['termbaseId']))).replace(`{${"exportId"}}`, encodeURIComponent(String(requestParameters['exportId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Polls a termbase via an export operation. The exported termbase can be downloaded once the status is `done`.
     * Poll Termbase Export
     */
    async pollExportTermbase(requestParameters: PollExportTermbaseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TermbaseExportResponse> {
        const response = await this.pollExportTermbaseRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
